import * as React from 'react';
import { OverridableStringUnion, OverrideProps, OverridableComponent, OverridableTypeMap } from '@mui/types';
import { TouchRippleProps } from './TouchRipple.types';
import { SxProps } from '../styles/Theme.types';
import { ButtonClasses } from './buttonClasses';
export interface ButtonPropsVariantOverrides {
}
export interface ButtonPropsColorOverrides {
}
export interface ButtonPropsSizeOverrides {
}
export interface ButtonActions {
    focusVisible(): void;
}
export type ButtonTypeMap<P = {}, D extends React.ElementType = 'button'> = {
    props: P & {
        /**
         * A ref for imperative actions.
         * It currently only supports `focusVisible()` action.
         */
        action?: React.Ref<ButtonActions>;
        /**
         * If `true`, the ripples are centered.
         * They won't start at the cursor interaction position.
         * @default false
         */
        centerRipple?: boolean;
        /**
         * This prop can help identify which element has keyboard focus.
         * The class name will be applied when the element gains the focus through keyboard interaction.
         * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
         * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
         * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
         * if needed.
         */
        focusVisibleClassName?: string;
        /**
         * The component used to render a link when the `href` prop is provided.
         * @default 'a'
         */
        LinkComponent?: React.ElementType;
        onFocusVisible?: React.FocusEventHandler<any>;
        /**
         * The content of the component.
         */
        children?: React.ReactNode;
        /**
         * Override or extend the styles applied to the component.
         */
        classes?: Partial<ButtonClasses>;
        /**
         * The color of the component.
         * It supports both default and custom theme colors, which can be added as shown in the
         * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
         * @default 'primary'
         */
        color?: OverridableStringUnion<'primary' | 'secondary' | 'tertiary', ButtonPropsColorOverrides>;
        /**
         * If `true`, the component is disabled.
         * @default false
         */
        disabled?: boolean;
        /**
         * If `true`, no elevation is used.
         * @default false
         */
        disableElevation?: boolean;
        /**
         * If `true`, the ripple effect is disabled.
         * @default false
         */
        disableRipple?: boolean;
        /**
         * If `true`, the touch ripple effect is disabled.
         * @default false
         */
        disableTouchRipple?: boolean;
        /**
         * Element placed after the children.
         */
        endIcon?: React.ReactNode;
        /**
         * If `true`, the button will take up the full width of its container.
         * @default false
         */
        fullWidth?: boolean;
        /**
         * The URL to link to when the button is clicked.
         * If defined, an `a` element will be used as the root node.
         */
        href?: string;
        /**
         * The size of the component.
         * `small` is equivalent to the dense button styling.
         * @default 'medium'
         */
        size?: OverridableStringUnion<'small' | 'medium' | 'large', ButtonPropsSizeOverrides>;
        /**
         * Element placed before the children.
         */
        startIcon?: React.ReactNode;
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx?: SxProps;
        /**
         * @default 0
         */
        tabIndex?: NonNullable<React.HTMLAttributes<any>['tabIndex']>;
        /**
         * Props applied to the `TouchRipple` element.
         */
        TouchRippleProps?: Partial<TouchRippleProps>;
        /**
         * The variant to use.
         * @default 'text'
         */
        variant?: OverridableStringUnion<'text' | 'outlined' | 'filled' | 'filledTonal' | 'elevated', ButtonPropsVariantOverrides>;
    };
    defaultComponent: D;
};
export interface ButtonOwnerState extends ButtonProps {
    /**
     * If `true`, the button's focus is visible.
     */
    focusVisible?: boolean;
    /**
     * If `true`, the button is active.
     */
    active?: boolean;
}
/**
 * A utility to create component types that inherit props from the Button.
 * This component has an additional overload if the `href` prop is set which
 * can make extension quite tricky
 */
export interface ExtendButtonTypeMap<M extends OverridableTypeMap> {
    props: M['props'] & ButtonTypeMap['props'];
    defaultComponent: M['defaultComponent'];
}
export type ExtendButton<M extends OverridableTypeMap> = ((props: {
    href: string;
} & OverrideProps<ExtendButtonTypeMap<M>, 'a'>) => JSX.Element) & OverridableComponent<ExtendButtonTypeMap<M>> & {
    propTypes?: any;
};
export type ButtonProps<D extends React.ElementType = ButtonTypeMap['defaultComponent'], P = {}> = OverrideProps<ButtonTypeMap<P, D>, D>;
