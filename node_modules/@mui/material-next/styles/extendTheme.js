import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"],
  _excluded2 = ["palette", "sys", "ref"];
import { deepmerge } from '@mui/utils';
import { colorChannel, alpha, darken, lighten, emphasize, unstable_createGetCssVar as systemCreateGetCssVar, unstable_styleFunctionSx as styleFunctionSx, unstable_prepareCssVars as prepareCssVars } from '@mui/system';
import { createTheme as createThemeWithoutVars, getOverlayAlpha } from '@mui/material/styles';
import defaultSxConfig from './sxConfig';
import md3CommonPalette from './palette';
import createMd3LightColorScheme from './createLightColorScheme';
import createMd3DarkColorScheme from './createDarkColorScheme';
import md3Typescale from './typescale';
import md3Typeface from './typeface';
import md3State from './state';
import { elevationLight, elevationDark } from './elevation';
import createMotions from './motion';
import md3shape from './shape';
import defaultShouldSkipGeneratingVar from './shouldSkipGeneratingVar';
const defaultLightOverlays = [...Array(25)].map(() => undefined);
const defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return undefined;
  }
  const overlay = getOverlayAlpha(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function assignNode(obj, keys) {
  keys.forEach(k => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  obj[key] = obj[key] || defaultValue;
}
export const createGetCssVar = (cssVarPrefix = 'md') => systemCreateGetCssVar(cssVarPrefix);
export default function extendTheme(options = {}, ...args) {
  var _input$sys, _input$sys2, _input$sys2$shape, _input$sys3, _input$sys4, _input$ref, _input$sys5, _colorSchemesInput$li, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$li4, _colorSchemesInput$li5, _colorSchemesInput$li6, _colorSchemesInput$li7, _colorSchemesInput$li8, _colorSchemesInput$da, _colorSchemesInput$da2, _colorSchemesInput$da3, _colorSchemesInput$da4, _colorSchemesInput$da5, _colorSchemesInput$da6, _colorSchemesInput$da7, _colorSchemesInput$da8, _colorSchemesInput$li9, _colorSchemesInput$li10, _colorSchemesInput$da9, _colorSchemesInput$da10;
  const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = 'md',
      shouldSkipGeneratingVar = defaultShouldSkipGeneratingVar
    } = options,
    input = _objectWithoutPropertiesLoose(options, _excluded);
  const getCssVar = createGetCssVar(cssVarPrefix);
  const md3LightColors = createMd3LightColorScheme(getCssVar, md3CommonPalette);
  const md3DarkColors = createMd3DarkColorScheme(getCssVar, md3CommonPalette);
  const shape = _extends({}, (_input$sys = input.sys) == null ? void 0 : _input$sys.shape, md3shape, {
    corner: _extends({}, (_input$sys2 = input.sys) == null ? void 0 : (_input$sys2$shape = _input$sys2.shape) == null ? void 0 : _input$sys2$shape.corner, md3shape.corner)
  });
  const motion = createMotions((_input$sys3 = input.sys) == null ? void 0 : _input$sys3.motion);
  const typescale = _extends({}, md3Typescale, (_input$sys4 = input.sys) == null ? void 0 : _input$sys4.typescale);
  const typeface = _extends({}, md3Typeface, (_input$ref = input.ref) == null ? void 0 : _input$ref.typeface);
  const state = _extends({}, md3State, (_input$sys5 = input.sys) == null ? void 0 : _input$sys5.state);
  const _createThemeWithoutVa = createThemeWithoutVars(_extends({}, input, {
      // Material You specific tokens
      // @ts-ignore - it's fine, everything that is not supported will be spread
      useMaterialYou: true,
      ref: _extends({}, input.ref, {
        typeface,
        palette: deepmerge(md3CommonPalette, (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li2 = _colorSchemesInput$li.ref) == null ? void 0 : _colorSchemesInput$li2.palette)
      }),
      sys: _extends({}, input.sys, {
        typescale,
        state,
        motion,
        color: _extends({}, md3LightColors, (_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li4 = _colorSchemesInput$li3.sys) == null ? void 0 : _colorSchemesInput$li4.color),
        elevation: (_colorSchemesInput$li5 = (_colorSchemesInput$li6 = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li7 = _colorSchemesInput$li6.sys) == null ? void 0 : _colorSchemesInput$li7.elevation) != null ? _colorSchemesInput$li5 : elevationLight,
        shape
      }),
      palette: _extends({}, colorSchemesInput.light && ((_colorSchemesInput$li8 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li8.palette))
    })),
    {
      palette: lightPalette,
      // @ts-ignore - sys is md3 specific token
      sys: lightSys,
      // @ts-ignore - ref is md3 specific token
      ref: lightRef
    } = _createThemeWithoutVa,
    muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2);
  const {
    palette: darkPalette,
    // @ts-ignore sys is md3 specific tokens
    sys: darkSys,
    // @ts-ignore ref is md3 specific tokens
    ref: darkRef
  } = createThemeWithoutVars({
    palette: _extends({
      mode: 'dark'
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette),
    // @ts-ignore - it's fine, everything that is not supported will be spread
    ref: _extends({}, input.ref, {
      typeface,
      palette: deepmerge(md3CommonPalette, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da3 = _colorSchemesInput$da2.ref) == null ? void 0 : _colorSchemesInput$da3.palette)
    }),
    sys: _extends({}, input.sys, {
      typescale,
      state,
      motion,
      color: _extends({}, md3DarkColors, (_colorSchemesInput$da4 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da5 = _colorSchemesInput$da4.sys) == null ? void 0 : _colorSchemesInput$da5.color),
      elevation: (_colorSchemesInput$da6 = (_colorSchemesInput$da7 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da8 = _colorSchemesInput$da7.sys) == null ? void 0 : _colorSchemesInput$da8.elevation) != null ? _colorSchemesInput$da6 : elevationDark,
      shape
    })
  });
  const {
    color: lightSysColor,
    elevation: lightSysElevation
  } = lightSys;
  const {
    palette: lightRefPalette
  } = lightRef;
  const {
    color: darkSysColor,
    elevation: darkSysElevation
  } = darkSys;
  const {
    palette: darkRefPalette
  } = darkRef;
  let theme = _extends({}, muiTheme, {
    cssVarPrefix,
    getCssVar,
    sys: lightSys,
    ref: lightRef,
    colorSchemes: _extends({}, colorSchemesInput, {
      light: _extends({}, colorSchemesInput.light, {
        // @ts-ignore they are added below
        palette: lightPalette,
        opacity: _extends({
          inputPlaceholder: 0.42,
          inputUnderline: 0.42,
          switchTrackDisabled: 0.12,
          switchTrack: 0.38
        }, (_colorSchemesInput$li9 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li9.opacity),
        overlays: ((_colorSchemesInput$li10 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li10.overlays) || defaultLightOverlays,
        sys: {
          color: lightSysColor,
          elevation: lightSysElevation
        },
        ref: {
          palette: lightRefPalette
        }
      }),
      dark: _extends({}, colorSchemesInput.dark, {
        // @ts-ignore they are added below
        palette: darkPalette,
        opacity: _extends({
          inputPlaceholder: 0.5,
          inputUnderline: 0.7,
          switchTrackDisabled: 0.2,
          switchTrack: 0.3
        }, (_colorSchemesInput$da9 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da9.opacity),
        overlays: ((_colorSchemesInput$da10 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da10.overlays) || defaultDarkOverlays,
        sys: {
          color: darkSysColor,
          elevation: darkSysElevation
        },
        ref: {
          palette: darkRefPalette
        }
      })
    })
  });
  Object.keys(theme.colorSchemes).forEach(key => {
    const palette = theme.colorSchemes[key].palette;

    // @ts-ignore sys is md3 specific token
    const colorSchemeSys = theme.colorSchemes[key].sys;
    // @ts-ignore ref is md3 specific token
    const colorSchemeRef = theme.colorSchemes[key].ref;

    // attach black & white channels to common node
    if (key === 'light') {
      setColor(palette.common, 'background', '#fff');
      setColor(palette.common, 'onBackground', '#000');
    } else {
      setColor(palette.common, 'background', '#000');
      setColor(palette.common, 'onBackground', '#fff');
    }

    // assign component variables
    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Button', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);
    if (key === 'light') {
      setColor(palette.Alert, 'errorColor', darken(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', darken(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', darken(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', darken(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));
      setColor(palette.Alert, 'errorFilledColor', lightPalette.getContrastText(palette.error.main));
      setColor(palette.Alert, 'infoFilledColor', lightPalette.getContrastText(palette.info.main));
      setColor(palette.Alert, 'successFilledColor', lightPalette.getContrastText(palette.success.main));
      setColor(palette.Alert, 'warningFilledColor', lightPalette.getContrastText(palette.warning.main));
      setColor(palette.Alert, 'errorStandardBg', lighten(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', lighten(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', lighten(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', lighten(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-light'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-light'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-light'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-light'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));
      setColor(palette.Button, 'inheritContainedBg', getCssVar('palette-grey-300'));
      setColor(palette.Button, 'inheritContainedHoverBg', getCssVar('palette-grey-A100'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));
      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', lighten(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, 'secondaryBg', lighten(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, 'errorBg', lighten(palette.error.main, 0.62));
      setColor(palette.LinearProgress, 'infoBg', lighten(palette.info.main, 0.62));
      setColor(palette.LinearProgress, 'successBg', lighten(palette.success.main, 0.62));
      setColor(palette.LinearProgress, 'warningBg', lighten(palette.warning.main, 0.62));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.11)`);
      setColor(palette.Slider, 'primaryTrack', lighten(palette.primary.main, 0.62));
      setColor(palette.Slider, 'secondaryTrack', lighten(palette.secondary.main, 0.62));
      setColor(palette.Slider, 'errorTrack', lighten(palette.error.main, 0.62));
      setColor(palette.Slider, 'infoTrack', lighten(palette.info.main, 0.62));
      setColor(palette.Slider, 'successTrack', lighten(palette.success.main, 0.62));
      setColor(palette.Slider, 'warningTrack', lighten(palette.warning.main, 0.62));
      const snackbarContentBackground = emphasize(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', lightPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, 'fabHoverBg', emphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));
      setColor(palette.Switch, 'primaryDisabledColor', lighten(palette.primary.main, 0.62));
      setColor(palette.Switch, 'secondaryDisabledColor', lighten(palette.secondary.main, 0.62));
      setColor(palette.Switch, 'errorDisabledColor', lighten(palette.error.main, 0.62));
      setColor(palette.Switch, 'infoDisabledColor', lighten(palette.info.main, 0.62));
      setColor(palette.Switch, 'successDisabledColor', lighten(palette.success.main, 0.62));
      setColor(palette.Switch, 'warningDisabledColor', lighten(palette.warning.main, 0.62));
      setColor(palette.TableCell, 'border', lighten(alpha(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, 'bg', alpha(palette.grey[700], 0.92));
    } else {
      setColor(palette.Alert, 'errorColor', lighten(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', lighten(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', lighten(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', lighten(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));
      setColor(palette.Alert, 'errorFilledColor', darkPalette.getContrastText(palette.error.dark));
      setColor(palette.Alert, 'infoFilledColor', darkPalette.getContrastText(palette.info.dark));
      setColor(palette.Alert, 'successFilledColor', darkPalette.getContrastText(palette.success.dark));
      setColor(palette.Alert, 'warningFilledColor', darkPalette.getContrastText(palette.warning.dark));
      setColor(palette.Alert, 'errorStandardBg', darken(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', darken(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', darken(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', darken(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));
      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode
      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));
      setColor(palette.Button, 'inheritContainedBg', getCssVar('palette-grey-800'));
      setColor(palette.Button, 'inheritContainedHoverBg', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));
      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', darken(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, 'secondaryBg', darken(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, 'errorBg', darken(palette.error.main, 0.5));
      setColor(palette.LinearProgress, 'infoBg', darken(palette.info.main, 0.5));
      setColor(palette.LinearProgress, 'successBg', darken(palette.success.main, 0.5));
      setColor(palette.LinearProgress, 'warningBg', darken(palette.warning.main, 0.5));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.13)`);
      setColor(palette.Slider, 'primaryTrack', darken(palette.primary.main, 0.5));
      setColor(palette.Slider, 'secondaryTrack', darken(palette.secondary.main, 0.5));
      setColor(palette.Slider, 'errorTrack', darken(palette.error.main, 0.5));
      setColor(palette.Slider, 'infoTrack', darken(palette.info.main, 0.5));
      setColor(palette.Slider, 'successTrack', darken(palette.success.main, 0.5));
      setColor(palette.Slider, 'warningTrack', darken(palette.warning.main, 0.5));
      const snackbarContentBackground = emphasize(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', darkPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, 'fabHoverBg', emphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'primaryDisabledColor', darken(palette.primary.main, 0.55));
      setColor(palette.Switch, 'secondaryDisabledColor', darken(palette.secondary.main, 0.55));
      setColor(palette.Switch, 'errorDisabledColor', darken(palette.error.main, 0.55));
      setColor(palette.Switch, 'infoDisabledColor', darken(palette.info.main, 0.55));
      setColor(palette.Switch, 'successDisabledColor', darken(palette.success.main, 0.55));
      setColor(palette.Switch, 'warningDisabledColor', darken(palette.warning.main, 0.55));
      setColor(palette.TableCell, 'border', darken(alpha(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, 'bg', alpha(palette.grey[700], 0.92));
    }
    palette.common.backgroundChannel = colorChannel(palette.common.background);
    palette.common.onBackgroundChannel = colorChannel(palette.common.onBackground);
    palette.dividerChannel = colorChannel(palette.divider);
    Object.keys(palette).forEach(c => {
      const color = c;
      const colors = palette[color];

      // Color palettes: primary, secondary, error, info, success, and warning
      if (colors.main) {
        // @ts-ignore
        palette[color].mainChannel = colorChannel(colors.main);
      }
      if (colors.light) {
        // @ts-ignore
        palette[color].lightChannel = colorChannel(colors.light);
      }
      if (colors.dark) {
        // @ts-ignore
        palette[color].darkChannel = colorChannel(colors.dark);
      }
      if (colors.contrastText) {
        // @ts-ignore
        palette[color].contrastTextChannel = colorChannel(colors.contrastText);
      }

      // Text colors: text.primary, text.secondary
      if (colors.primary && typeof colors.primary === 'string') {
        // @ts-ignore
        palette[color].primaryChannel = colorChannel(colors.primary);
      }
      if (colors.secondary && typeof colors.primary === 'string') {
        // @ts-ignore
        palette[color].secondaryChannel = colorChannel(colors.secondary);
      }

      // Action colors: action.active, action.selected
      if (colors.active) {
        // @ts-ignore
        palette[color].activeChannel = colorChannel(colors.active);
      }
      if (colors.selected) {
        // @ts-ignore
        palette[color].selectedChannel = colorChannel(colors.selected);
      }
    });

    // Material You specific channels
    if (key === 'light') {
      colorSchemeSys.color.primaryChannel = colorChannel(colorSchemeRef.palette.primary['40']);
      colorSchemeSys.color.onPrimaryChannel = colorChannel(colorSchemeRef.palette.primary['100']);
      colorSchemeSys.color.secondaryChannel = colorChannel(colorSchemeRef.palette.secondary['40']);
      colorSchemeSys.color.onSecondaryChannel = colorChannel(colorSchemeRef.palette.secondary['100']);
      colorSchemeSys.color.tertiaryChannel = colorChannel(colorSchemeRef.palette.tertiary['40']);
      colorSchemeSys.color.onTertiaryChannel = colorChannel(colorSchemeRef.palette.tertiary['100']);
      colorSchemeSys.color.secondaryContainerChannel = colorChannel(colorSchemeRef.palette.secondary['90']);
      colorSchemeSys.color.onSurfaceChannel = colorChannel(colorSchemeRef.palette.neutral['10']);
    } else {
      colorSchemeSys.color.primaryChannel = colorChannel(colorSchemeRef.palette.primary['80']);
      colorSchemeSys.color.onPrimaryChannel = colorChannel(colorSchemeRef.palette.primary['20']);
      colorSchemeSys.color.secondaryChannel = colorChannel(colorSchemeRef.palette.secondary['80']);
      colorSchemeSys.color.onSecondaryChannel = colorChannel(colorSchemeRef.palette.secondary['20']);
      colorSchemeSys.color.tertiaryChannel = colorChannel(colorSchemeRef.palette.tertiary['80']);
      colorSchemeSys.color.onTertiaryChannel = colorChannel(colorSchemeRef.palette.tertiary['20']);
      colorSchemeSys.color.secondaryContainerChannel = colorChannel(colorSchemeRef.palette.secondary['30']);
      colorSchemeSys.color.onSurfaceChannel = colorChannel(colorSchemeRef.palette.neutral['90']);
    }
  });
  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
  const parserConfig = {
    prefix: cssVarPrefix,
    shouldSkipGeneratingVar
  };
  const {
    vars: themeVars,
    generateCssVars
  } = prepareCssVars(theme, parserConfig);
  theme.vars = themeVars;
  theme.generateCssVars = generateCssVars;
  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
  theme.unstable_sxConfig = _extends({}, defaultSxConfig, input == null ? void 0 : input.unstable_sxConfig);
  theme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  return theme;
}