"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonRoot = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _utils = require("@mui/utils");
var _useButton = _interopRequireDefault(require("@mui/base/useButton"));
var _composeClasses = _interopRequireDefault(require("@mui/base/composeClasses"));
var _system = require("@mui/system");
var _TouchRipple = _interopRequireDefault(require("./TouchRipple"));
var _useTouchRipple = _interopRequireDefault(require("./useTouchRipple"));
var _styles = require("../styles");
var _buttonClasses = _interopRequireWildcard(require("./buttonClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["action", "centerRipple", "children", "className", "classes", "color", "component", "disabled", "focusableWhenDisabled", "disableElevation", "disableRipple", "disableTouchRipple", "endIcon", "focusVisibleClassName", "fullWidth", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "size", "startIcon", "tabIndex", "TouchRippleProps", "type", "variant"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = styleProps => {
  const {
    classes,
    color,
    disabled,
    active,
    disableElevation,
    focusVisible,
    focusVisibleClassName,
    fullWidth,
    size,
    variant
  } = styleProps;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', variant, `color${(0, _utils.unstable_capitalize)(color != null ? color : '')}`, `size${(0, _utils.unstable_capitalize)(size != null ? size : '')}`, disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
    label: ['label'],
    startIcon: ['startIcon', `iconSize${(0, _utils.unstable_capitalize)(size != null ? size : '')}`],
    endIcon: ['endIcon', `iconSize${(0, _utils.unstable_capitalize)(size != null ? size : '')}`]
  };
  const composedClasses = (0, _composeClasses.default)(slots, _buttonClasses.getButtonUtilityClass, classes);
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
const commonIconStyles = ({
  size
}) => (0, _extends2.default)({
  color: 'var(--md-comp-button-icon-color)'
}, size === 'small' && {
  '& > *:nth-of-type(1)': {
    fontSize: 18
  }
}, size === 'medium' && {
  '& > *:nth-of-type(1)': {
    fontSize: 20
  }
}, size === 'large' && {
  '& > *:nth-of-type(1)': {
    fontSize: 22
  }
});
const ButtonRoot = (0, _styles.styled)('button', {
  name: 'MuiButton',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${(0, _utils.unstable_capitalize)(ownerState.color)}`], styles[`size${(0, _utils.unstable_capitalize)(ownerState.size)}`], styles[`${ownerState.variant}Size${(0, _utils.unstable_capitalize)(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
  }
})(({
  ownerState,
  theme
}) => {
  var _ownerState$color, _ownerState$color2, _ownerState$color3, _ownerState$color4, _ownerState$color5, _ownerState$color6, _ownerState$color7, _ownerState$color8, _ownerState$color9, _ownerState$color10, _ownerState$color11, _ownerState$color12, _ownerState$color13, _ownerState$color14, _ownerState$color15, _ownerState$color16, _ownerState$color17, _ownerState$color18, _ownerState$color19, _ownerState$color20, _ownerState$color21, _ownerState$color22, _ownerState$variant, _ownerState$variant2, _ownerState$variant3, _ownerState$variant4, _ownerState$variant5, _ownerState$variant6, _ownerState$variant7, _ownerState$variant8, _ownerState$variant9, _ownerState$variant10, _ownerState$variant11, _ownerState$variant12, _ownerState$variant13, _ownerState$variant14;
  const tokens = theme.vars || theme;
  const containerColor = {
    elevated: `linear-gradient(0deg, rgba(103, 80, 164, 0.05), rgba(103, 80, 164, 0.05)), ${tokens.sys.color.surface}`,
    filled: tokens.sys.color[(_ownerState$color = ownerState.color) != null ? _ownerState$color : 'primary'],
    filledTonal: tokens.sys.color.secondaryContainer,
    outlined: 'transparent',
    text: 'transparent'
  };
  const labelTextColor = {
    elevated: tokens.sys.color.primary,
    filled: tokens.sys.color[`on${(0, _utils.unstable_capitalize)((_ownerState$color2 = ownerState.color) != null ? _ownerState$color2 : 'primary')}`],
    filledTonal: tokens.sys.color.onSecondaryContainer,
    outlined: tokens.sys.color[(_ownerState$color3 = ownerState.color) != null ? _ownerState$color3 : 'primary'],
    text: tokens.sys.color[(_ownerState$color4 = ownerState.color) != null ? _ownerState$color4 : 'primary']
  };
  const disabledContainerColor = {
    elevated: theme.vars ? `rgba(${theme.vars.sys.color.onSurfaceChannel} / 0.12)` : (0, _system.alpha)(theme.sys.color.onSurface, 0.12),
    filled: theme.vars ? `rgba(${theme.vars.sys.color.onSurfaceChannel} / 0.12)` : (0, _system.alpha)(theme.sys.color.onSurface, 0.12),
    filledTonal: theme.vars ? `rgba(${theme.vars.sys.color.onSurfaceChannel} / 0.12)` : (0, _system.alpha)(theme.sys.color.onSurface, 0.12),
    outlined: 'transparent',
    text: 'transparent'
  };
  const hoveredContainerColor = {
    elevated: theme.vars ? `rgba(${tokens.sys.color.primaryChannel} / ${tokens.sys.state.hover.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color.primary, theme.sys.state.hover.stateLayerOpacity),
    filled: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color5 = ownerState.color) != null ? _ownerState$color5 : 'primary'}Channel`]} / calc(1 - ${tokens.sys.state.hover.stateLayerOpacity}))` : (0, _system.alpha)(theme.sys.color[(_ownerState$color6 = ownerState.color) != null ? _ownerState$color6 : 'primary'], 1 - theme.sys.state.hover.stateLayerOpacity),
    filledTonal: theme.vars ? `rgba(${tokens.sys.color.secondaryContainerChannel} / calc(1 - ${tokens.sys.state.hover.stateLayerOpacity}))` : (0, _system.alpha)(theme.sys.color.secondaryContainer, 1 - theme.sys.state.hover.stateLayerOpacity),
    outlined: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color7 = ownerState.color) != null ? _ownerState$color7 : 'primary'}Channel`]} / ${tokens.sys.state.hover.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color8 = ownerState.color) != null ? _ownerState$color8 : 'primary'], theme.sys.state.hover.stateLayerOpacity),
    text: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color9 = ownerState.color) != null ? _ownerState$color9 : 'primary'}Channel`]} / ${tokens.sys.state.hover.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color10 = ownerState.color) != null ? _ownerState$color10 : 'primary'], theme.sys.state.hover.stateLayerOpacity)
  };
  const pressedContainerColor = {
    elevated: theme.vars ? `rgba(${tokens.sys.color.primaryChannel} / ${tokens.sys.state.pressed.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color.primary, theme.sys.state.pressed.stateLayerOpacity),
    filled: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color11 = ownerState.color) != null ? _ownerState$color11 : 'primary'}Channel`]} / calc(1 - ${tokens.sys.state.pressed.stateLayerOpacity}))` : (0, _system.alpha)(theme.sys.color[(_ownerState$color12 = ownerState.color) != null ? _ownerState$color12 : 'primary'], 1 - theme.sys.state.pressed.stateLayerOpacity),
    filledTonal: theme.vars ? `rgba(${tokens.sys.color.secondaryContainerChannel} / calc(1 - ${tokens.sys.state.pressed.stateLayerOpacity}))` : (0, _system.alpha)(theme.sys.color.secondaryContainer, 1 - theme.sys.state.pressed.stateLayerOpacity),
    outlined: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color13 = ownerState.color) != null ? _ownerState$color13 : 'primary'}Channel`]} / ${tokens.sys.state.pressed.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color14 = ownerState.color) != null ? _ownerState$color14 : 'primary'], theme.sys.state.pressed.stateLayerOpacity),
    text: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color15 = ownerState.color) != null ? _ownerState$color15 : 'primary'}Channel`]} / ${tokens.sys.state.pressed.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color16 = ownerState.color) != null ? _ownerState$color16 : 'primary'], theme.sys.state.pressed.stateLayerOpacity)
  };
  const focusedContainerColor = {
    elevated: theme.vars ? `rgba(${tokens.sys.color.primaryChannel} / ${tokens.sys.state.focus.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color.primary, theme.sys.state.focus.stateLayerOpacity),
    filled: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color17 = ownerState.color) != null ? _ownerState$color17 : 'primary'}Channel`]} / calc(1 - ${tokens.sys.state.focus.stateLayerOpacity}))` : (0, _system.alpha)(theme.sys.color[(_ownerState$color18 = ownerState.color) != null ? _ownerState$color18 : 'primary'], 1 - theme.sys.state.focus.stateLayerOpacity),
    // According to the spec, this should be: secondaryContainerChannel / 1 - focusStateLayerOpacity, but this doesn't have the enough contrast
    filledTonal: theme.vars ? `rgba(${tokens.sys.color.primaryChannel} / 0.3)` : (0, _system.alpha)(theme.sys.color.primary, 0.3),
    outlined: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color19 = ownerState.color) != null ? _ownerState$color19 : 'primary'}Channel`]} / ${tokens.sys.state.focus.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color20 = ownerState.color) != null ? _ownerState$color20 : 'primary'], theme.sys.state.focus.stateLayerOpacity),
    text: theme.vars ? `rgba(${tokens.sys.color[`${(_ownerState$color21 = ownerState.color) != null ? _ownerState$color21 : 'primary'}Channel`]} / ${tokens.sys.state.focus.stateLayerOpacity})` : (0, _system.alpha)(theme.sys.color[(_ownerState$color22 = ownerState.color) != null ? _ownerState$color22 : 'primary'], theme.sys.state.focus.stateLayerOpacity)
  };
  const containerElevation = {
    elevated: tokens.sys.elevation[1],
    filled: tokens.sys.elevation[0],
    filledTonal: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    text: tokens.sys.elevation[0]
  };
  const hoveredContainerElevation = {
    elevated: tokens.sys.elevation[2],
    filled: tokens.sys.elevation[1],
    filledTonal: tokens.sys.elevation[1],
    outlined: tokens.sys.elevation[0],
    text: tokens.sys.elevation[0]
  };
  const focusedContainerElevation = {
    elevated: tokens.sys.elevation[1],
    filled: tokens.sys.elevation[0],
    filledTonal: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    text: tokens.sys.elevation[0]
  };
  const pressedContainerElevation = {
    elevated: tokens.sys.elevation[1],
    filled: tokens.sys.elevation[0],
    filledTonal: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    text: tokens.sys.elevation[0]
  };
  const disabledLabelTextColor = theme.vars ? `rgba(${theme.vars.sys.color.onSurfaceChannel} / 0.38)` : (0, _system.alpha)(theme.sys.color.onSurface, 0.38);
  const letterSpacing = `${theme.sys.typescale.label.large.tracking / theme.sys.typescale.label.large.size}rem`;
  const borderRadiusValue = tokens.sys.shape.corner.full;
  const borderRadius = Number.isNaN(Number(borderRadiusValue)) ? borderRadiusValue : `${borderRadiusValue}px`;
  return (0, _extends2.default)({
    // Icon variables default values
    '--md-comp-button-icon-color': labelTextColor[(_ownerState$variant = ownerState.variant) != null ? _ownerState$variant : 'text'],
    '--md-comp-button-hovered-icon-color': labelTextColor[(_ownerState$variant2 = ownerState.variant) != null ? _ownerState$variant2 : 'text'],
    // same as default
    '--md-comp-button-pressed-icon-color': labelTextColor[(_ownerState$variant3 = ownerState.variant) != null ? _ownerState$variant3 : 'text'],
    // same as default
    '--md-comp-button-focused-icon-color': labelTextColor[(_ownerState$variant4 = ownerState.variant) != null ? _ownerState$variant4 : 'text'],
    // same as default
    '--md-comp-button-disabled-icon-color': disabledLabelTextColor,
    // Normalized styles for buttons
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: `var(--Button-margin, 0)`,
    // Remove the margin in Safari by default
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    '&::-moz-focus-inner': {
      borderStyle: 'none' // Remove Firefox dotted outline.
    },

    '@media print': {
      colorAdjust: 'exact'
    },
    padding: '10px 24px',
    minWidth: 64,
    letterSpacing,
    transition: theme.sys.motion.create(['background-color', 'box-shadow', 'border-color', 'color'], {
      duration: tokens.sys.motion.duration.short3
    }),
    fontFamily: tokens.sys.typescale.label.large.family,
    fontWeight: tokens.sys.typescale.label.large.weight,
    fontSize: theme.typography.pxToRem(theme.sys.typescale.label.large.size),
    // the pxToRem should be moved to typescale in the future
    lineHeight: `calc(${tokens.sys.typescale.label.large.lineHeight} / ${theme.sys.typescale.label.large.size})`,
    borderRadius: `var(--Button-radius, ${borderRadius})`,
    backgroundColor: containerColor[(_ownerState$variant5 = ownerState.variant) != null ? _ownerState$variant5 : 'text'],
    color: labelTextColor[(_ownerState$variant6 = ownerState.variant) != null ? _ownerState$variant6 : 'text'],
    boxShadow: containerElevation[(_ownerState$variant7 = ownerState.variant) != null ? _ownerState$variant7 : 'text']
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${tokens.sys.color.outline}`,
    padding: '9px 23px'
  }, {
    '--Button-gap': '0.5rem'
  }, ownerState.size === 'small' && (0, _extends2.default)({
    '--Button-gap': '0.45rem',
    fontSize: theme.typography.pxToRem(theme.sys.typescale.label.large.size - 1),
    // the pxToRem should be moved to typescale in the future
    padding: '8px 20px'
  }, ownerState.variant === 'outlined' && {
    padding: '7px 19px'
  }), ownerState.size === 'large' && (0, _extends2.default)({
    '--Button-gap': '0.55rem',
    fontSize: theme.typography.pxToRem(theme.sys.typescale.label.large.size + 1),
    // the pxToRem should be moved to typescale in the future
    padding: '12px 26px'
  }, ownerState.variant === 'outlined' && {
    padding: '11px 25px'
  }), {
    '&:hover': {
      '--md-comp-button-icon-color': 'var(--md-comp-button-hovered-icon-color)',
      backgroundColor: hoveredContainerColor[(_ownerState$variant8 = ownerState.variant) != null ? _ownerState$variant8 : 'text'],
      boxShadow: hoveredContainerElevation[(_ownerState$variant9 = ownerState.variant) != null ? _ownerState$variant9 : 'text']
    },
    [`&.${_buttonClasses.default.active}`]: (0, _extends2.default)({
      '--md-comp-button-icon-color': 'var(--md-comp-button-pressed-icon-color)'
    }, (ownerState.disableRipple || ownerState.disableTouchRipple) && {
      backgroundColor: pressedContainerColor[(_ownerState$variant10 = ownerState.variant) != null ? _ownerState$variant10 : 'text']
    }, {
      boxShadow: pressedContainerElevation[(_ownerState$variant11 = ownerState.variant) != null ? _ownerState$variant11 : 'text']
    }),
    [`&.${_buttonClasses.default.focusVisible}`]: {
      '--md-comp-button-icon-color': 'var(--md-comp-button-focused-icon-color)',
      backgroundColor: focusedContainerColor[(_ownerState$variant12 = ownerState.variant) != null ? _ownerState$variant12 : 'text'],
      boxShadow: focusedContainerElevation[(_ownerState$variant13 = ownerState.variant) != null ? _ownerState$variant13 : 'text']
    },
    [`&.${_buttonClasses.default.disabled}`]: (0, _extends2.default)({
      // Allows developer to specify the disabled icon color var
      '--md-comp-button-icon-color': 'var(--md-comp-button-disabled-icon-color)',
      pointerEvents: 'none',
      // Disable link interactions
      cursor: 'default',
      color: disabledLabelTextColor,
      backgroundColor: disabledContainerColor[(_ownerState$variant14 = ownerState.variant) != null ? _ownerState$variant14 : 'text'],
      boxShadow: tokens.sys.elevation[0]
    }, ownerState.variant === 'outlined' && {
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.sys.color.onSurfaceChannel} / 0.12)` : (0, _system.alpha)(theme.sys.color.onSurface, 0.12)}`
    })
  });
});
exports.ButtonRoot = ButtonRoot;
const ButtonStartIcon = (0, _styles.styled)('span', {
  name: 'MuiButton',
  slot: 'StartIcon',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.startIcon, styles[`iconSize${(0, _utils.unstable_capitalize)(ownerState.size)}`]];
  }
})(({
  ownerState
}) => (0, _extends2.default)({
  display: 'inherit',
  marginRight: 'var(--Button-gap)'
}, commonIconStyles(ownerState)));
const ButtonEndIcon = (0, _styles.styled)('span', {
  name: 'MuiButton',
  slot: 'EndIcon',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.endIcon, styles[`iconSize${(0, _utils.unstable_capitalize)(ownerState.size)}`]];
  }
})(({
  ownerState
}) => (0, _extends2.default)({
  display: 'inherit',
  marginLeft: 'var(--Button-gap)'
}, commonIconStyles(ownerState)));
const Button = /*#__PURE__*/React.forwardRef(function Button(inProps, ref) {
  const props = (0, _system.useThemeProps)({
    props: inProps,
    name: 'MuiButton'
  });
  const {
      action,
      centerRipple = false,
      children,
      className,
      classes: classesProp,
      color = 'primary',
      component = 'button',
      disabled = false,
      focusableWhenDisabled = false,
      disableElevation = false,
      disableRipple = false,
      disableTouchRipple = false,
      endIcon: endIconProp,
      fullWidth = false,
      LinkComponent = 'a',
      onFocusVisible,
      size = 'medium',
      startIcon: startIconProp,
      tabIndex = 0,
      TouchRippleProps,
      type,
      variant = 'text'
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const buttonRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(buttonRef, ref);
  const rippleRef = React.useRef(null);
  let ComponentProp = component;
  if (ComponentProp === 'button' && (other.href || other.to)) {
    ComponentProp = LinkComponent;
  }
  const {
    focusVisible,
    active,
    setFocusVisible,
    getRootProps
  } = (0, _useButton.default)({
    disabled,
    focusableWhenDisabled,
    href: props.href,
    onFocusVisible,
    tabIndex,
    // @ts-ignore
    to: props.to,
    type,
    rootRef: handleRef
  });
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), [setFocusVisible]);
  const {
    enableTouchRipple,
    getRippleHandlers
  } = (0, _useTouchRipple.default)({
    disabled,
    disableRipple,
    disableTouchRipple,
    rippleRef
  });
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(() => {
      if (enableTouchRipple && !rippleRef.current) {
        console.error(['MUI: The `component` prop provided to Button is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
      }
    }, [enableTouchRipple]);
  }
  const ownerState = (0, _extends2.default)({}, props, {
    classes: classesProp,
    color,
    component,
    disabled,
    disableElevation,
    active,
    focusVisible,
    fullWidth,
    size,
    tabIndex,
    type,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const startIcon = startIconProp && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonStartIcon, {
    className: classes.startIcon,
    ownerState: ownerState,
    children: startIconProp
  });
  const endIcon = endIconProp && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonEndIcon, {
    className: classes.endIcon,
    ownerState: ownerState,
    children: endIconProp
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ButtonRoot, (0, _extends2.default)({
    as: ComponentProp,
    className: (0, _clsx.default)(classes.root, className),
    ownerState: ownerState
  }, getRootProps(getRippleHandlers(props)), other, {
    children: [startIcon, children, endIcon, enableTouchRipple ?
    /*#__PURE__*/
    /* TouchRipple is only needed client-side, x2 boost on the server. */
    (0, _jsxRuntime.jsx)(_TouchRipple.default, (0, _extends2.default)({
      center: centerRipple
    }, TouchRippleProps, {
      ref: rippleRef
    })) : null]
  }));
});
process.env.NODE_ENV !== "production" ? Button.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: _utils.refType,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: _propTypes.default.bool,
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   * @default 'primary'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['primary', 'secondary', 'tertiary']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _utils.elementTypeAcceptingRef,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: _propTypes.default.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: _propTypes.default.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: _propTypes.default.bool,
  /**
   * Element placed after the children.
   */
  endIcon: _propTypes.default.node,
  /**
   * @ignore
   */
  focusVisibleClassName: _propTypes.default.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: _propTypes.default.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: _propTypes.default.string,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: _propTypes.default.elementType,
  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * @ignore
   */
  onContextMenu: _propTypes.default.func,
  /**
   * @ignore
   */
  onDragLeave: _propTypes.default.func,
  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,
  /**
   * @ignore
   */
  onFocusVisible: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyUp: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseDown: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseLeave: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseUp: _propTypes.default.func,
  /**
   * @ignore
   */
  onTouchEnd: _propTypes.default.func,
  /**
   * @ignore
   */
  onTouchMove: _propTypes.default.func,
  /**
   * @ignore
   */
  onTouchStart: _propTypes.default.func,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large']), _propTypes.default.string]),
  /**
   * Element placed before the children.
   */
  startIcon: _propTypes.default.node,
  /**
   * @default 0
   */
  tabIndex: _propTypes.default.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: _propTypes.default.object,
  /**
   * @ignore
   */
  type: _propTypes.default.oneOfType([_propTypes.default.oneOf(['button', 'reset', 'submit']), _propTypes.default.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['text', 'outlined', 'filled', 'filledTonal', 'elevated']), _propTypes.default.string])
} : void 0;
var _default = Button;
exports.default = _default;