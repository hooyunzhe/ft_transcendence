"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetCssVar = void 0;
exports.default = extendTheme;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _system = require("@mui/system");
var _styles = require("@mui/material/styles");
var _sxConfig = _interopRequireDefault(require("./sxConfig"));
var _palette = _interopRequireDefault(require("./palette"));
var _createLightColorScheme = _interopRequireDefault(require("./createLightColorScheme"));
var _createDarkColorScheme = _interopRequireDefault(require("./createDarkColorScheme"));
var _typescale = _interopRequireDefault(require("./typescale"));
var _typeface = _interopRequireDefault(require("./typeface"));
var _state = _interopRequireDefault(require("./state"));
var _elevation = require("./elevation");
var _motion = _interopRequireDefault(require("./motion"));
var _shape = _interopRequireDefault(require("./shape"));
var _shouldSkipGeneratingVar = _interopRequireDefault(require("./shouldSkipGeneratingVar"));
const _excluded = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"],
  _excluded2 = ["palette", "sys", "ref"];
const defaultLightOverlays = [...Array(25)].map(() => undefined);
const defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return undefined;
  }
  const overlay = (0, _styles.getOverlayAlpha)(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function assignNode(obj, keys) {
  keys.forEach(k => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  obj[key] = obj[key] || defaultValue;
}
const createGetCssVar = (cssVarPrefix = 'md') => (0, _system.unstable_createGetCssVar)(cssVarPrefix);
exports.createGetCssVar = createGetCssVar;
function extendTheme(options = {}, ...args) {
  var _input$sys, _input$sys2, _input$sys2$shape, _input$sys3, _input$sys4, _input$ref, _input$sys5, _colorSchemesInput$li, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$li4, _colorSchemesInput$li5, _colorSchemesInput$li6, _colorSchemesInput$li7, _colorSchemesInput$li8, _colorSchemesInput$da, _colorSchemesInput$da2, _colorSchemesInput$da3, _colorSchemesInput$da4, _colorSchemesInput$da5, _colorSchemesInput$da6, _colorSchemesInput$da7, _colorSchemesInput$da8, _colorSchemesInput$li9, _colorSchemesInput$li10, _colorSchemesInput$da9, _colorSchemesInput$da10;
  const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = 'md',
      shouldSkipGeneratingVar = _shouldSkipGeneratingVar.default
    } = options,
    input = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
  const getCssVar = createGetCssVar(cssVarPrefix);
  const md3LightColors = (0, _createLightColorScheme.default)(getCssVar, _palette.default);
  const md3DarkColors = (0, _createDarkColorScheme.default)(getCssVar, _palette.default);
  const shape = (0, _extends2.default)({}, (_input$sys = input.sys) == null ? void 0 : _input$sys.shape, _shape.default, {
    corner: (0, _extends2.default)({}, (_input$sys2 = input.sys) == null ? void 0 : (_input$sys2$shape = _input$sys2.shape) == null ? void 0 : _input$sys2$shape.corner, _shape.default.corner)
  });
  const motion = (0, _motion.default)((_input$sys3 = input.sys) == null ? void 0 : _input$sys3.motion);
  const typescale = (0, _extends2.default)({}, _typescale.default, (_input$sys4 = input.sys) == null ? void 0 : _input$sys4.typescale);
  const typeface = (0, _extends2.default)({}, _typeface.default, (_input$ref = input.ref) == null ? void 0 : _input$ref.typeface);
  const state = (0, _extends2.default)({}, _state.default, (_input$sys5 = input.sys) == null ? void 0 : _input$sys5.state);
  const _createThemeWithoutVa = (0, _styles.createTheme)((0, _extends2.default)({}, input, {
      // Material You specific tokens
      // @ts-ignore - it's fine, everything that is not supported will be spread
      useMaterialYou: true,
      ref: (0, _extends2.default)({}, input.ref, {
        typeface,
        palette: (0, _utils.deepmerge)(_palette.default, (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li2 = _colorSchemesInput$li.ref) == null ? void 0 : _colorSchemesInput$li2.palette)
      }),
      sys: (0, _extends2.default)({}, input.sys, {
        typescale,
        state,
        motion,
        color: (0, _extends2.default)({}, md3LightColors, (_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li4 = _colorSchemesInput$li3.sys) == null ? void 0 : _colorSchemesInput$li4.color),
        elevation: (_colorSchemesInput$li5 = (_colorSchemesInput$li6 = colorSchemesInput.light) == null ? void 0 : (_colorSchemesInput$li7 = _colorSchemesInput$li6.sys) == null ? void 0 : _colorSchemesInput$li7.elevation) != null ? _colorSchemesInput$li5 : _elevation.elevationLight,
        shape
      }),
      palette: (0, _extends2.default)({}, colorSchemesInput.light && ((_colorSchemesInput$li8 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li8.palette))
    })),
    {
      palette: lightPalette,
      // @ts-ignore - sys is md3 specific token
      sys: lightSys,
      // @ts-ignore - ref is md3 specific token
      ref: lightRef
    } = _createThemeWithoutVa,
    muiTheme = (0, _objectWithoutPropertiesLoose2.default)(_createThemeWithoutVa, _excluded2);
  const {
    palette: darkPalette,
    // @ts-ignore sys is md3 specific tokens
    sys: darkSys,
    // @ts-ignore ref is md3 specific tokens
    ref: darkRef
  } = (0, _styles.createTheme)({
    palette: (0, _extends2.default)({
      mode: 'dark'
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette),
    // @ts-ignore - it's fine, everything that is not supported will be spread
    ref: (0, _extends2.default)({}, input.ref, {
      typeface,
      palette: (0, _utils.deepmerge)(_palette.default, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da3 = _colorSchemesInput$da2.ref) == null ? void 0 : _colorSchemesInput$da3.palette)
    }),
    sys: (0, _extends2.default)({}, input.sys, {
      typescale,
      state,
      motion,
      color: (0, _extends2.default)({}, md3DarkColors, (_colorSchemesInput$da4 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da5 = _colorSchemesInput$da4.sys) == null ? void 0 : _colorSchemesInput$da5.color),
      elevation: (_colorSchemesInput$da6 = (_colorSchemesInput$da7 = colorSchemesInput.dark) == null ? void 0 : (_colorSchemesInput$da8 = _colorSchemesInput$da7.sys) == null ? void 0 : _colorSchemesInput$da8.elevation) != null ? _colorSchemesInput$da6 : _elevation.elevationDark,
      shape
    })
  });
  const {
    color: lightSysColor,
    elevation: lightSysElevation
  } = lightSys;
  const {
    palette: lightRefPalette
  } = lightRef;
  const {
    color: darkSysColor,
    elevation: darkSysElevation
  } = darkSys;
  const {
    palette: darkRefPalette
  } = darkRef;
  let theme = (0, _extends2.default)({}, muiTheme, {
    cssVarPrefix,
    getCssVar,
    sys: lightSys,
    ref: lightRef,
    colorSchemes: (0, _extends2.default)({}, colorSchemesInput, {
      light: (0, _extends2.default)({}, colorSchemesInput.light, {
        // @ts-ignore they are added below
        palette: lightPalette,
        opacity: (0, _extends2.default)({
          inputPlaceholder: 0.42,
          inputUnderline: 0.42,
          switchTrackDisabled: 0.12,
          switchTrack: 0.38
        }, (_colorSchemesInput$li9 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li9.opacity),
        overlays: ((_colorSchemesInput$li10 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li10.overlays) || defaultLightOverlays,
        sys: {
          color: lightSysColor,
          elevation: lightSysElevation
        },
        ref: {
          palette: lightRefPalette
        }
      }),
      dark: (0, _extends2.default)({}, colorSchemesInput.dark, {
        // @ts-ignore they are added below
        palette: darkPalette,
        opacity: (0, _extends2.default)({
          inputPlaceholder: 0.5,
          inputUnderline: 0.7,
          switchTrackDisabled: 0.2,
          switchTrack: 0.3
        }, (_colorSchemesInput$da9 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da9.opacity),
        overlays: ((_colorSchemesInput$da10 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da10.overlays) || defaultDarkOverlays,
        sys: {
          color: darkSysColor,
          elevation: darkSysElevation
        },
        ref: {
          palette: darkRefPalette
        }
      })
    })
  });
  Object.keys(theme.colorSchemes).forEach(key => {
    const palette = theme.colorSchemes[key].palette;

    // @ts-ignore sys is md3 specific token
    const colorSchemeSys = theme.colorSchemes[key].sys;
    // @ts-ignore ref is md3 specific token
    const colorSchemeRef = theme.colorSchemes[key].ref;

    // attach black & white channels to common node
    if (key === 'light') {
      setColor(palette.common, 'background', '#fff');
      setColor(palette.common, 'onBackground', '#000');
    } else {
      setColor(palette.common, 'background', '#000');
      setColor(palette.common, 'onBackground', '#fff');
    }

    // assign component variables
    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Button', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);
    if (key === 'light') {
      setColor(palette.Alert, 'errorColor', (0, _system.darken)(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', (0, _system.darken)(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', (0, _system.darken)(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', (0, _system.darken)(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));
      setColor(palette.Alert, 'errorFilledColor', lightPalette.getContrastText(palette.error.main));
      setColor(palette.Alert, 'infoFilledColor', lightPalette.getContrastText(palette.info.main));
      setColor(palette.Alert, 'successFilledColor', lightPalette.getContrastText(palette.success.main));
      setColor(palette.Alert, 'warningFilledColor', lightPalette.getContrastText(palette.warning.main));
      setColor(palette.Alert, 'errorStandardBg', (0, _system.lighten)(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', (0, _system.lighten)(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', (0, _system.lighten)(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', (0, _system.lighten)(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-light'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-light'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-light'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-light'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));
      setColor(palette.Button, 'inheritContainedBg', getCssVar('palette-grey-300'));
      setColor(palette.Button, 'inheritContainedHoverBg', getCssVar('palette-grey-A100'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));
      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', (0, _system.lighten)(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.lighten)(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, 'errorBg', (0, _system.lighten)(palette.error.main, 0.62));
      setColor(palette.LinearProgress, 'infoBg', (0, _system.lighten)(palette.info.main, 0.62));
      setColor(palette.LinearProgress, 'successBg', (0, _system.lighten)(palette.success.main, 0.62));
      setColor(palette.LinearProgress, 'warningBg', (0, _system.lighten)(palette.warning.main, 0.62));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.11)`);
      setColor(palette.Slider, 'primaryTrack', (0, _system.lighten)(palette.primary.main, 0.62));
      setColor(palette.Slider, 'secondaryTrack', (0, _system.lighten)(palette.secondary.main, 0.62));
      setColor(palette.Slider, 'errorTrack', (0, _system.lighten)(palette.error.main, 0.62));
      setColor(palette.Slider, 'infoTrack', (0, _system.lighten)(palette.info.main, 0.62));
      setColor(palette.Slider, 'successTrack', (0, _system.lighten)(palette.success.main, 0.62));
      setColor(palette.Slider, 'warningTrack', (0, _system.lighten)(palette.warning.main, 0.62));
      const snackbarContentBackground = (0, _system.emphasize)(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', lightPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.emphasize)(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));
      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.lighten)(palette.primary.main, 0.62));
      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.lighten)(palette.secondary.main, 0.62));
      setColor(palette.Switch, 'errorDisabledColor', (0, _system.lighten)(palette.error.main, 0.62));
      setColor(palette.Switch, 'infoDisabledColor', (0, _system.lighten)(palette.info.main, 0.62));
      setColor(palette.Switch, 'successDisabledColor', (0, _system.lighten)(palette.success.main, 0.62));
      setColor(palette.Switch, 'warningDisabledColor', (0, _system.lighten)(palette.warning.main, 0.62));
      setColor(palette.TableCell, 'border', (0, _system.lighten)((0, _system.alpha)(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, 'bg', (0, _system.alpha)(palette.grey[700], 0.92));
    } else {
      setColor(palette.Alert, 'errorColor', (0, _system.lighten)(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', (0, _system.lighten)(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', (0, _system.lighten)(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', (0, _system.lighten)(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));
      setColor(palette.Alert, 'errorFilledColor', darkPalette.getContrastText(palette.error.dark));
      setColor(palette.Alert, 'infoFilledColor', darkPalette.getContrastText(palette.info.dark));
      setColor(palette.Alert, 'successFilledColor', darkPalette.getContrastText(palette.success.dark));
      setColor(palette.Alert, 'warningFilledColor', darkPalette.getContrastText(palette.warning.dark));
      setColor(palette.Alert, 'errorStandardBg', (0, _system.darken)(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', (0, _system.darken)(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', (0, _system.darken)(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', (0, _system.darken)(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));
      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode
      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));
      setColor(palette.Button, 'inheritContainedBg', getCssVar('palette-grey-800'));
      setColor(palette.Button, 'inheritContainedHoverBg', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));
      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', (0, _system.darken)(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.darken)(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, 'errorBg', (0, _system.darken)(palette.error.main, 0.5));
      setColor(palette.LinearProgress, 'infoBg', (0, _system.darken)(palette.info.main, 0.5));
      setColor(palette.LinearProgress, 'successBg', (0, _system.darken)(palette.success.main, 0.5));
      setColor(palette.LinearProgress, 'warningBg', (0, _system.darken)(palette.warning.main, 0.5));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.13)`);
      setColor(palette.Slider, 'primaryTrack', (0, _system.darken)(palette.primary.main, 0.5));
      setColor(palette.Slider, 'secondaryTrack', (0, _system.darken)(palette.secondary.main, 0.5));
      setColor(palette.Slider, 'errorTrack', (0, _system.darken)(palette.error.main, 0.5));
      setColor(palette.Slider, 'infoTrack', (0, _system.darken)(palette.info.main, 0.5));
      setColor(palette.Slider, 'successTrack', (0, _system.darken)(palette.success.main, 0.5));
      setColor(palette.Slider, 'warningTrack', (0, _system.darken)(palette.warning.main, 0.5));
      const snackbarContentBackground = (0, _system.emphasize)(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', darkPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.emphasize)(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.darken)(palette.primary.main, 0.55));
      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.darken)(palette.secondary.main, 0.55));
      setColor(palette.Switch, 'errorDisabledColor', (0, _system.darken)(palette.error.main, 0.55));
      setColor(palette.Switch, 'infoDisabledColor', (0, _system.darken)(palette.info.main, 0.55));
      setColor(palette.Switch, 'successDisabledColor', (0, _system.darken)(palette.success.main, 0.55));
      setColor(palette.Switch, 'warningDisabledColor', (0, _system.darken)(palette.warning.main, 0.55));
      setColor(palette.TableCell, 'border', (0, _system.darken)((0, _system.alpha)(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, 'bg', (0, _system.alpha)(palette.grey[700], 0.92));
    }
    palette.common.backgroundChannel = (0, _system.colorChannel)(palette.common.background);
    palette.common.onBackgroundChannel = (0, _system.colorChannel)(palette.common.onBackground);
    palette.dividerChannel = (0, _system.colorChannel)(palette.divider);
    Object.keys(palette).forEach(c => {
      const color = c;
      const colors = palette[color];

      // Color palettes: primary, secondary, error, info, success, and warning
      if (colors.main) {
        // @ts-ignore
        palette[color].mainChannel = (0, _system.colorChannel)(colors.main);
      }
      if (colors.light) {
        // @ts-ignore
        palette[color].lightChannel = (0, _system.colorChannel)(colors.light);
      }
      if (colors.dark) {
        // @ts-ignore
        palette[color].darkChannel = (0, _system.colorChannel)(colors.dark);
      }
      if (colors.contrastText) {
        // @ts-ignore
        palette[color].contrastTextChannel = (0, _system.colorChannel)(colors.contrastText);
      }

      // Text colors: text.primary, text.secondary
      if (colors.primary && typeof colors.primary === 'string') {
        // @ts-ignore
        palette[color].primaryChannel = (0, _system.colorChannel)(colors.primary);
      }
      if (colors.secondary && typeof colors.primary === 'string') {
        // @ts-ignore
        palette[color].secondaryChannel = (0, _system.colorChannel)(colors.secondary);
      }

      // Action colors: action.active, action.selected
      if (colors.active) {
        // @ts-ignore
        palette[color].activeChannel = (0, _system.colorChannel)(colors.active);
      }
      if (colors.selected) {
        // @ts-ignore
        palette[color].selectedChannel = (0, _system.colorChannel)(colors.selected);
      }
    });

    // Material You specific channels
    if (key === 'light') {
      colorSchemeSys.color.primaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.primary['40']);
      colorSchemeSys.color.onPrimaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.primary['100']);
      colorSchemeSys.color.secondaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['40']);
      colorSchemeSys.color.onSecondaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['100']);
      colorSchemeSys.color.tertiaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.tertiary['40']);
      colorSchemeSys.color.onTertiaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.tertiary['100']);
      colorSchemeSys.color.secondaryContainerChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['90']);
      colorSchemeSys.color.onSurfaceChannel = (0, _system.colorChannel)(colorSchemeRef.palette.neutral['10']);
    } else {
      colorSchemeSys.color.primaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.primary['80']);
      colorSchemeSys.color.onPrimaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.primary['20']);
      colorSchemeSys.color.secondaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['80']);
      colorSchemeSys.color.onSecondaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['20']);
      colorSchemeSys.color.tertiaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.tertiary['80']);
      colorSchemeSys.color.onTertiaryChannel = (0, _system.colorChannel)(colorSchemeRef.palette.tertiary['20']);
      colorSchemeSys.color.secondaryContainerChannel = (0, _system.colorChannel)(colorSchemeRef.palette.secondary['30']);
      colorSchemeSys.color.onSurfaceChannel = (0, _system.colorChannel)(colorSchemeRef.palette.neutral['90']);
    }
  });
  theme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), theme);
  const parserConfig = {
    prefix: cssVarPrefix,
    shouldSkipGeneratingVar
  };
  const {
    vars: themeVars,
    generateCssVars
  } = (0, _system.unstable_prepareCssVars)(theme, parserConfig);
  theme.vars = themeVars;
  theme.generateCssVars = generateCssVars;
  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
  theme.unstable_sxConfig = (0, _extends2.default)({}, _sxConfig.default, input == null ? void 0 : input.unstable_sxConfig);
  theme.unstable_sx = function sx(props) {
    return (0, _system.unstable_styleFunctionSx)({
      sx: props,
      theme: this
    });
  };
  return theme;
}