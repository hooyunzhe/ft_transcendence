"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _system = require("@mui/system");
function createPaletteStyle(options = {
  prop: 'color'
}) {
  const {
    prop,
    cssProperty = options.prop
  } = options;
  const fn = props => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const styleFromPropValue = propValueFinal => {
      const value = (0, _system.getPath)(theme, `sys.color.${propValueFinal}`, true) || (0, _system.getPath)(theme, `ref.palette.${propValueFinal}`, true) || (0, _system.getPath)(theme, `palette.${propValueFinal}`, true) || propValueFinal;
      return {
        [cssProperty]: value
      };
    };
    return (0, _system.handleBreakpoints)(props, propValue, styleFromPropValue);
  };
  return fn;
}

// eslint-disable-next-line no-restricted-globals
const isNumber = value => typeof value === 'number' || !isNaN(parseFloat(value));
const createBorderRadiusStyle = props => {
  if (props.borderRadius !== undefined && props.borderRadius !== null) {
    const numberTransformer = (0, _system.createUnaryUnit)(props.theme, 'shape.borderRadius', 4, 'borderRadius');
    const styleFromPropValue = propValue => ({
      borderRadius: isNumber(propValue) ? (0, _system.getValue)(numberTransformer, propValue) : (0, _system.getPath)(props.theme, `sys.shape.corner.${propValue}`, true)
    });
    return (0, _system.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
const sxConfig = (0, _extends2.default)({}, _system.unstable_defaultSxConfig, {
  color: {
    style: createPaletteStyle({
      prop: 'color'
    })
  },
  bgcolor: {
    style: createPaletteStyle({
      prop: 'bgcolor',
      cssProperty: 'backgroundColor'
    })
  },
  backgroundColor: {
    style: createPaletteStyle({
      prop: 'backgroundColor',
      cssProperty: 'backgroundColor'
    })
  },
  borderColor: {
    style: createPaletteStyle({
      prop: 'borderColor'
    })
  },
  borderTopColor: {
    style: createPaletteStyle({
      prop: 'borderTopColor'
    })
  },
  borderBottomColor: {
    style: createPaletteStyle({
      prop: 'borderBottomColor'
    })
  },
  borderLeftColor: {
    style: createPaletteStyle({
      prop: 'borderLeftColor'
    })
  },
  borderRightColor: {
    style: createPaletteStyle({
      prop: 'borderRightColor'
    })
  },
  borderRadius: {
    style: createBorderRadiusStyle
  }
});
var _default = sxConfig;
exports.default = _default;